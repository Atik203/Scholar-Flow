---
alwaysApply: true
description: Core project standards and architecture
---

# Core Project Rules

## Repository Standards

1. **Package Manager**: Use Yarn Berry (v4). Never introduce npm or package-lock.json.
2. **TypeScript**: Strict typing; avoid `any`. Run `yarn type-check` before committing major changes.
3. **Linting/Formatting**: Use existing ESLint/Prettier configs. Don't reformat unrelated code in a patch.
4. **Monorepo**: Keep concerns separated (frontend vs backend). Shared logic belongs in `packages/*`.
5. **Ports**: Frontend 3000, Backend 5000.

## Environment & Security

1. **Env Files**: Do not commit secrets. When adding a variable, update docs and example envs.
2. **Locations**: Backend `apps/backend/.env`; Frontend `apps/frontend/.env.local`.
3. **Security**: No plaintext secrets in code. Validate and sanitize all external input.
4. **Database**: `DATABASE_URL` required; `DIRECT_DATABASE_URL` for extension management.

## Project Status

- **Current Phase**: Phase 1 MVP - **Paper Management System completed** âœ… + **Production-Ready Improvements** âœ… (September 17, 2025)
- **Technology Stack**: Next.js 15 + Express.js + PostgreSQL + Prisma ORM + TypeScript + Sonner (Toast)
- **Major Completions**: OAuth authentication âœ…, Paper upload & storage âœ…, Modern UI/UX âœ…, Production security & performance âœ…
- **Recent Improvements**: Security hardening, performance monitoring, comprehensive error handling, health checks âœ…
- **Roadmap**: Only build features in current phase (see `Roadmap.md`)

## Quality Gates

1. **Build**: `yarn build` must succeed before merging.
2. **Types**: `yarn type-check` must be clean (no errors).
3. **Lint**: `yarn lint` with zero errors.
4. **Tests**: Add/adjust tests for new logic; critical features require comprehensive test coverage.
5. **Commits/PRs**: Small, focused, conventional messages. Reference related issue when possible.

## ðŸš€ Production-Ready Standards (September 17, 2025)

### Security & Performance
- **Debug Logging**: Only log debug info in development (`NODE_ENV !== "production"`)
- **Type Safety**: No `any` types; use proper interfaces (`AuthenticatedRequest`, etc.)
- **Rate Limiting**: Apply to all mutation endpoints, especially uploads
- **Performance Monitoring**: Track response times with `performanceMonitor` middleware
- **Database Optimization**: Add composite indexes for hot query paths

### Error Handling & Monitoring  
- **Standardized Errors**: Use feature-specific error classes extending `ApiError`
- **Health Checks**: Comprehensive monitoring endpoints (`/api/health/*`)
- **Toast Integration**: Use Sonner via `ToastProvider` - never import `toast` directly
- **Smart Retry**: Auto-retry network/server errors, manual retry for client errors
- **Error Classification**: Network, client (4xx), server (5xx) with appropriate handling

### Development Standards
- **Environment Checks**: Always check `NODE_ENV` before debug operations
- **BigInt Handling**: Cast to integer in SQL for JSON serialization
- **Performance Headers**: Add `X-Response-Time` headers for monitoring
- **Memory Monitoring**: Track heap usage and memory thresholds in health checks
