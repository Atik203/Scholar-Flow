---
description: Frontend development standards and UI guidelines
globs:
  - "apps/frontend/**"
alwaysApply: false
---

# Frontend Rules

## ✅ ESTABLISHED PATTERNS (Phase 1 – Week 5.5)

1. **Authentication UI**: Login/register with OAuth + proper validation ✅
2. **Dashboard Shell**: Role-scoped routing + admin overview refresh ✅
3. **Paper & Collection UX**: Upload, search, preview, rich editor flows ✅
4. **Workspace Tools**: Member management, invitations, activity views ✅
5. **AI Experience**: Gemini-first chat + summarization UI with fallback ✅
6. **Error Handling**: Sonner integration, retry logic, and smart error classification ✅

## Core Development Standards

1. **Next.js App Router**: Prefer Server Components; add `"use client"` only for interactivity/state.
2. **State/Data**: RTK Query for server data. Derive UI state locally when possible.
3. **Forms**: React Hook Form + Zod for validation both client + server.
4. **Auth**: NextAuth (JWT). Keep sensitive logic server-side. No direct Prisma usage in client components.
5. **Styling**: Tailwind + ShadCN. Put reusable primitives in `components/ui`.
6. **Performance**: Use `next/image`, `next/font`; stream large UI with Suspense; avoid unnecessary client bundles.
7. **SEO**: Use Metadata API; ensure canonical URLs; plan sitemap + robots when routes stabilize.
8. **Error States**: Provide loading / empty / error UI for each data fetch.
9. **Accessibility**: Maintain focus states, labels, keyboard navigation.

## UI Component Guidelines

1. **Consult `docs/UI_DESIGN.md` FIRST** before creating new pages or components
2. **Component Taxonomy**:
   - `components/auth/` - Authentication related
   - `components/layout/` - Navigation, headers, sidebars
   - `components/ui/` - ShadCN primitives
   - `components/customUI/` - Custom components
3. **Design System**: Use existing OKLCH color system, maintain `max-w-[1440px]` container width
4. **Feature Flags**: Use established feature flag patterns for incomplete features

## Design System Standards

- **Colors**: Use OKLCH color system with existing success, warning, info variants
- **Typography**: Use Typography component with established heading scales
- **Spacing**: Use max-w-[1440px] container width and consistent padding scales
- **Animations**: Use existing hover effects (lift, scale, glow) and transitions

## 🚀 Advanced Error Handling Patterns (September 17, 2025)

### RTK Query Enhancement with Retry Logic

1. **Enhanced API Slice**: Use retry configuration and error transformation
   ```typescript
   // ✅ CORRECT: Enhanced base query with retry
   import { retry } from "@reduxjs/toolkit/query/react";
   const baseQueryWithRetry = retry(baseQuery, { maxRetries: 3 });
   ```

2. **Error Classification**: Network, client, and server error handling
   ```typescript
   // ✅ CORRECT: Smart retry logic
   // Auto-retry on 5xx/network errors, skip retry on 4xx client errors
   ```

### Sonner Toast Integration

1. **Use ToastProvider Functions**: Never import `toast` directly
   ```typescript
   // ✅ CORRECT: Use existing ToastProvider functions
   import { showErrorToast, showSuccessToast } from '@/components/providers/ToastProvider';
   
   // ❌ WRONG: Direct toast import
   import { toast } from 'sonner';
   ```

2. **Error Toast Best Practices**: Use `showApiErrorToast()` from error utilities
   ```typescript
   // ✅ CORRECT: Smart error toast with retry respect
   import { showApiErrorToast } from '@/lib/errorHandling';
   showApiErrorToast(error); // Respects network error retry logic
   ```

### Custom Error Handling Hooks

1. **Generic Error Handler**: Use `useErrorHandler` for any error
   ```typescript
   // ✅ CORRECT: Generic error handling
   const { errorMessage, retry, isRetryable } = useErrorHandler(error, {
     showToast: true,
     logError: true,
     onError: (error) => console.log('Custom handling')
   });
   ```

2. **Query Error Handler**: Use `useQueryErrorHandler` for RTK Query queries
   ```typescript
   // ✅ CORRECT: Query-specific error handling with refetch
   const { errorMessage, retry } = useQueryErrorHandler({
     error, isLoading, isError, refetch
   });
   ```

3. **Mutation Error Handler**: Use `useMutationErrorHandler` for mutations
   ```typescript
   // ✅ CORRECT: Mutation error handling with retry capability
   const { retry, isRetryable } = useMutationErrorHandler({
     error, isLoading, isError, reset
   }, retryFunction);
   ```

### Error Handling Standards

- **Smart Retry**: Auto-retry on network/server errors, manual retry for client errors
- **Error Classification**: Network (retry), Client 4xx (fix required), Server 5xx (retry)
- **Toast Integration**: Consistent error messaging with theme support
- **Development Logging**: Detailed error logs only in development environment

## Code Quality

- **TypeScript**: 100% type coverage, no `any` types unless absolutely necessary
- **Performance**: Implement lazy loading, React.memo for expensive components
- **Accessibility**: WCAG 2.1 AA compliance, proper ARIA labels and roles
- **No Secrets**: Never expose private keys or tokens in client code
