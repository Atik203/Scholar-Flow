---
description: Backend architecture, database operations, and authentication
globs:
  - "apps/backend/**"
alwaysApply: false
---

# Backend Rules

## ‚úÖ ESTABLISHED SYSTEMS (Phase 1 Complete - September 17, 2025)

1. **Authentication**: OAuth (Google/GitHub) + JWT system with upsert handling ‚úÖ
2. **Paper Management**: Complete upload, S3 storage, metadata extraction ‚úÖ  
3. **User Profiles**: CRUD operations with validation and security ‚úÖ
4. **File Processing**: PDF upload with metadata extraction ‚úÖ
5. **Production Improvements**: Security, performance, monitoring, error handling ‚úÖ

## Architecture & Structure

1. **Structure**: Feature modules under `src/app/modules` (controller, service, routes, validation schemas).
2. **Routes**: Register in `src/app/routes` only. No ad-hoc route registration elsewhere.
3. **Controllers**: Thin. Business logic belongs in services.
4. **Services**: Use Prisma client from shared singleton. Handle transactions explicitly when needed.
5. **Validation**: Zod for request bodies, params, queries. Reject early on failure.

## Database Operations - $queryRaw Optimization

**CRITICAL RULE**: All database operations MUST use `$queryRaw` or `$executeRaw` instead of Prisma Client methods for optimal performance.

### ‚úÖ REQUIRED: Use $queryRaw for:

- All SELECT queries (findMany, findUnique, findFirst)
- All INSERT operations (create)
- All UPDATE operations (update, upsert)
- All DELETE operations (delete)
- All aggregation queries (count, groupBy)
- All complex joins and relationships

### üîí EXCEPTIONS: Keep Prisma Client ONLY for:

- **OAuth operations** that require complex constraint handling:
  - `createAccount()` - Provider constraint management
  - `createOrUpdateUser()` - Email constraint management
  - `createOrUpdateUserWithOAuth()` - Email verification handling

### Implementation Standards

```typescript
// ‚úÖ CORRECT: Use $queryRaw with proper typing
const users = await prisma.$queryRaw<any[]>`
  SELECT id, email, name, "createdAt"
  FROM "User"
  WHERE "isDeleted" = false
  ORDER BY "createdAt" DESC
  LIMIT ${limit} OFFSET ${skip}
`;

// ‚ùå WRONG: Using Prisma Client
const users = await prisma.user.findMany({
  where: { isDeleted: false },
  orderBy: { createdAt: "desc" },
  skip,
  take: limit,
});
```

### Security & Performance

- **SQL Injection Prevention**: Use template literals: `WHERE email = ${email}`
- **Type Safety**: Use `prisma.$queryRaw<Type[]>` for proper typing
- **Field Selection**: Select only required fields, avoid `SELECT *`
- **Pagination**: Use `LIMIT ${limit} OFFSET ${skip}` for efficient pagination

## Authentication & Security

1. **OAuth Account Management**: ALWAYS use standard Prisma upsert for OAuth accounts.
2. **Raw Query Warning**: Do NOT change OAuth account creation to raw queries - causes unique constraint errors (P2002).
3. **Error Handling**: All auth methods must use try/catch with ApiError for consistent error responses.
4. **JWT**: Use JWT access + refresh. Use `auth` middleware for protected endpoints.
5. **CORS**: Use `FRONTEND_URL` env; default `http://localhost:3000` in dev.

## üöÄ Production-Ready Patterns (September 17, 2025)

### Security & Performance Standards

1. **Debug Logging Control**: Auth middleware conditionally logs only in development
   ```typescript
   // ‚úÖ CORRECT: Conditional debug logging
   if (process.env.NODE_ENV !== "production") {
     console.log("Auth debug info:", { userId, role });
   }
   ```

2. **Type Safety**: Replace all `any` types with proper interfaces
   ```typescript
   // ‚úÖ CORRECT: Use AuthenticatedRequest interface
   export interface AuthenticatedRequest extends Request {
     user: { id: string; email: string; role: string };
   }
   ```

3. **Rate Limiting**: Apply feature-specific rate limiters to endpoints
   ```typescript
   // ‚úÖ CORRECT: Feature-specific rate limiters
   import { paperUploadLimiter, paperListLimiter } from '../middleware/rateLimiter';
   router.post('/upload', paperUploadLimiter, uploadPaper);
   router.get('/', paperListLimiter, listPapers);
   ```

4. **Database Performance**: Add composite indexes for hot query paths
   ```prisma
   // ‚úÖ CORRECT: Composite indexes for performance
   model Paper {
     @@index([uploaderId, workspaceId], name: "paper_uploader_workspace_idx")
     @@index([processingStatus, createdAt], name: "paper_status_created_idx")
   }
   ```

### Error Handling Standards

1. **Feature-Specific Error Classes**: Create error classes extending `ApiError`
   ```typescript
   // ‚úÖ CORRECT: Feature-specific error handling
   export class PaperError extends ApiError {
     constructor(message: string, statusCode: number = 400, errorCode?: string) {
       super(statusCode, message);
       this.errorCode = errorCode;
     }
   }
   ```

2. **Standardized Error Format**: All errors follow consistent structure
   ```typescript
   // ‚úÖ CORRECT: Standardized error response
   {
     success: false,
     message: string,
     statusCode: number,
     errorCode?: string,
     details?: object,
     timestamp: string
   }
   ```

### Performance Monitoring

1. **Performance Monitoring Middleware**: Track response times and add headers
   ```typescript
   // ‚úÖ CORRECT: Performance monitoring
   import { performanceMonitor } from '../middleware/performanceMonitor';
   app.use(performanceMonitor);
   ```

2. **Health Check Endpoints**: Comprehensive health monitoring
   ```typescript
   // ‚úÖ CORRECT: Health check endpoints
   // /api/health - Basic health status
   // /api/health/detailed - Full system health (database, memory, environment)
   // /api/health/live - Kubernetes liveness probe  
   // /api/health/ready - Kubernetes readiness probe
   ```

### Common Production Pitfalls to Avoid

- ‚ùå Logging debug info in production (always check `NODE_ENV`)
- ‚ùå Using `any` types (use proper interfaces like `AuthenticatedRequest`)
- ‚ùå Missing rate limiting on upload/mutation endpoints
- ‚ùå Missing performance monitoring on critical paths
- ‚ùå Not handling BigInt serialization in JSON (cast to integer in SQL)
- ‚ùå Missing composite indexes on frequently queried columns

## Testing & Quality

1. **Testing**: Add unit tests for non-trivial service logic; integration tests for new routes.
2. **Critical Features**: Authentication flows require comprehensive test coverage.
3. **Errors**: Throw `ApiError(status, message)`; avoid returning partial successes silently.
4. **Logging**: Avoid console noise. Use structured logs for important events.

## Prisma & Database

1. **Prisma**: After modifying schema run migrations then `yarn db:generate` (includes TypedSQL).
2. **Raw SQL**: Keep raw SQL in `prisma/sql` (one statement per file).
3. **TypedSQL**: Import from `@prisma/client/sql`; execute with `$queryRawTyped` or `$queryRaw`.
4. **pgvector**: Only run similarity queries if `USE_PGVECTOR=true`. Ensure extension exists before deploying usage.
5. **Pagination**: Use provided pagination helper; never return unbounded lists.
